#!/usr/bin/env ruby2.7

require 'optparse'
require 'liquid'
require 'jekyll' # register Jekyll's Liquid filters
require 'open-uri'
require 'json'

$options = {:"output-directory" => '.'}

parser = OptionParser.new do |opt|
  opt.banner = "usage: headless2static [options] template_file url"
  opt.on("-o DIR", "--output-directory=DIR", "directory in which the output files are saved")
  opt.on("-f", "--force", "overwrite existing files")
end

parser.parse!(into: $options)
if not ARGV.length() == 2
  puts "missing argument"
  puts parser.help()
  exit
end

$output_directory = $options[:"output-directory"].sub(/\/$/, '')
if not File.directory?($output_directory)
  puts "output directory '#{$output_directory}' is not a directory"
  exit
end

# this is the file name of the template
$template_file_name = ARGV.shift
if not File.file?($template_file_name)
  puts "template file '#{$template_file_name}' is not a file"
  exit
end

# this is the template for the file names
$file_name_template = Liquid::Template.parse(File.basename($template_file_name))

open($template_file_name) do |file|
  $content_template = Liquid::Template.parse(file.read)
end

$url = ARGV.shift

URI.open($url) do |io|
  json_result = JSON.parse(io.read)
  if json_result.is_a?(Array)
    data_array = json_result
  elsif json_result.key?('data') and json_result['data'].is_a?(Array)
    data_array = json_result['data']
  else
    data_array = [json_result]
  end
  for item in data_array do
    file_name = $file_name_template.render(item)

    output_path = "#{$output_directory}/#{file_name}"

    if File.exist?(output_path) and not $options[:force] then
      puts "#{output_path} exists, skipping..."
      next
    end

    puts "generating #{output_path}..."
    content = $content_template.render(item)
    File.write(output_path, content)
  end
end
